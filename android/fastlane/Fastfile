# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.55.0"

default_platform :android

platform :android do

  def increment_version_code(gradle_build: 'app/build.gradle')
    sh %Q{cd ../ && echo "$(awk '{sub(/versionCode [[:digit:]]+$/,"versionCode "$2+1)}1' #{gradle_build})" > #{gradle_build} && cd -}
  end

  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  lane :upload_beta do
    upload_to_play_store(track: 'beta')
  end


  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    increment_version_code
    gradle(task: 'clean')
    gradle(
      task: "assemble",
      build_type: "Release"
    )
    sh("sh", "-c", "./helpers/sign_apk.sh")
    upload_to_play_store(track: 'beta')
  end


  lane :build do
    gradle(task: "clean")
    gradle(
      task: "assemble",
      build_type: "Release"
    )
    sh("sh", "-c", "./helpers/sign_apk.sh")
    sh("sh", "-c", "./helpers/install_to_android_device.sh")
    # crashlytics
  end


  desc "Deploy a new version to the Google Play"
  lane :release do

    increment_version_code gradle_build: 'app/build.gradle'
    gradle(task: 'clean')
    gradle(
      task: "assemble",
      build_type: "Release",
    )
    sh("sh", "-c", "./helpers/sign_apk.sh")
    supply(apk: "app/app-release.apk")
  end


  lane :sign do
    sh("sh", "-c", "./helpers/sign_apk.sh")
  end


  lane :upload do
    upload_to_play_store(track: 'beta')
  end


  # lane :sign do |options|

  #   apk_path = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  #   # Pass the signed APK into supply 
  #   supply(
  #     apk: apk_path,
  #     package_name: package_name,
  #     track: "beta",
  #     skip_upload_metadata: true,
  #     skip_upload_images: true,
  #     skip_upload_screenshots: true
  #   )

  #   # sign_apk(
  #   #   alias: "workspacekey0",
  #   #   storepass: options[:storepass],
  #   #   keystore_path: "./keystores/workspace.jks",
  #   #   tsa: "http://timestamp.comodoca.com/rfc316",
  #   #   signed_apk_path: options[:signed_apk_path],
  #   #   keypass: options[:keypass]
  #   # )
    # zipalign(apk_path: "#{lane_context[SharedValues::SIGNED_APK_PATH]}")
  # end
  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
